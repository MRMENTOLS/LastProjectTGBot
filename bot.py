import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext
from ai_integration_openrouter import generate_profession_recommendations, parse_ai_response
from db import init_db, add_profession_to_db, get_random_profession_from_db

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –®–∫–æ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
SUBJECTS = [
    "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫", "–ê–ª–≥–µ–±—Ä–∞ –∏ –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞",
    "–ì–µ–æ–º–µ—Ç—Ä–∏—è", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–§–∏–∑–∏–∫–∞", "–•–∏–º–∏—è", "–ë–∏–æ–ª–æ–≥–∏—è", "–ò—Å—Ç–æ—Ä–∏—è",
    "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞", "–û—Å–Ω–æ–≤—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∑–∞—â–∏—Ç—ã –†–æ–¥–∏–Ω—ã",
    "–†–∞–∑–≥–æ–≤–æ—Ä—ã –æ –≤–∞–∂–Ω–æ–º"
]

user_data = {}

def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data='start_test')],
        [InlineKeyboardButton("–°–ª—É—á–∞–π–Ω–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è", callback_data='random_profession')]
    ]
    update.message.reply_text(
        "üöÄ –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ä—å–µ—Ä—É. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

def ask_subject(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    user_id = query.from_user.id
    user_data[user_id] = {"answers": []}

    buttons = []
    for i, subject in enumerate(SUBJECTS):
        buttons.append([InlineKeyboardButton(subject, callback_data=f"subject_{i}")])
    buttons.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="finish")])

    query.edit_message_text("–í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –ª—é–±–∏–º—ã–µ —à–∫–æ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:", reply_markup=InlineKeyboardMarkup(buttons))

def handle_subject_choice(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    idx = int(query.data.split('_')[1])
    subject = SUBJECTS[idx]

    if subject in user_data[user_id]["answers"]:
        user_data[user_id]["answers"].remove(subject)
    else:
        user_data[user_id]["answers"].append(subject)

    buttons = []
    for i, s in enumerate(SUBJECTS):
        if s in user_data[user_id]["answers"]:
            buttons.append([InlineKeyboardButton(f"‚úÖ {s}", callback_data=f"subject_{i}")])
        else:
            buttons.append([InlineKeyboardButton(s, callback_data=f"subject_{i}")])
    buttons.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="finish")])

    try:
        query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(buttons))
    except Exception as e:
        if "Message is not modified" not in str(e):
            logging.error(e)

    query.answer()

def finish_selection(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    selected_subjects = user_data[user_id]["answers"]

    if not selected_subjects:
        query.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç!")
        return

    query.edit_message_text("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã...")

    raw_ai_response = generate_profession_recommendations(selected_subjects)

    if raw_ai_response:
        try:
            professions_list = parse_ai_response(raw_ai_response)
            for prof in professions_list:
                add_profession_to_db(prof, selected_subjects)

            query.edit_message_text(raw_ai_response)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
            query.edit_message_text(raw_ai_response)
    else:
        profession = get_random_profession_from_db()
        if profession:
            education_links = '\n  '.join(profession['education'])
            text = (
                f"üìö –ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò, –Ω–æ –Ω–∞—à–ª–∏ —Å–ª—É—á–∞–π–Ω—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é:\n\n"
                f"üíº *{profession['name']}*\n\n"
                f"{profession['description']}\n\n"
                f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞:\n"
                f"  - {profession['salary']}\n\n"
                f"üìö –ì–¥–µ —É—á–∏—Ç—å—Å—è:\n"
                f"  {education_links}"
            )
            query.edit_message_text(text, parse_mode="Markdown")
        else:
            query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò –∏ –≤ –ë–î –Ω–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–π.")

def random_profession(update: Update, context: CallbackContext):
    query = update.callback_query
    profession = get_random_profession_from_db()
    if profession:
        education_links = '\n  '.join(profession['education'])
        text = (
            f"üíº *{profession['name']}*\n\n"
            f"{profession['description']}\n\n"
            f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞:\n"
            f"  - {profession['salary']}\n\n"
            f"üìö –ì–¥–µ —É—á–∏—Ç—å—Å—è:\n"
            f"  {education_links}"
        )
        query.edit_message_text(text, parse_mode="Markdown")
    else:
        query.edit_message_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")

def main():
    from config import BOT_TOKEN
    updater = Updater(BOT_TOKEN)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(ask_subject, pattern='start_test'))
    dp.add_handler(CallbackQueryHandler(handle_subject_choice, pattern=r'subject_\d+'))
    dp.add_handler(CallbackQueryHandler(finish_selection, pattern='finish'))
    dp.add_handler(CallbackQueryHandler(random_profession, pattern='random_profession'))

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    init_db()
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    main()